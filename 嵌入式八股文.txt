1.函数指针和指针函数
①指向函数的指针 int add（int A,int B）{return A + B;}
int (*ptr)(int,int) = &add;
②返回值是指针的函数 int* add(void){}

2.指针的大小(与编译器大小有关)
32位4字节，64位8字节

3.sizeof 与 strlen
①sizeof是一个运算符，strlen是一个函数（string.h）
②sizeof计算所占内存大小，strlen计算字符串长度
 sizeof("\0")->2(\0\0)  strlen("\0")->0

4.数组指针与指针数组
①指向一个数组的指针，一个指针
int (*ptr) [10]
②一个数组，里面每个元素都是一个指针
int* ptr [10]

5.C语言的内存分配
①静态存储区分配：静态变量，全局变量
②栈上分配：函数中定义的局部变量
③堆上分配：malloc(C),new(C++)

6.结构体与联合体
①struct：不同成员放在不同的地址中，大小为每个成员的大小之和
typedef struct {int A,int B[5],int C} DATA;     20字节
②uinon：共享一块地址，共用体大小为成员中占内存最大的大小
union struct {int A,DATA B,int C} DATAS;        28字节

7.野指针
指向不可用内存的指针
①创建时未赋值
②指针被free和delete后未赋值为NULL
③指针越界

8.数组与链表
①数组地址空间连续，链表地址空间随机
②数组直接提供下标访问速度快
③链表增删改查速度快方便

9.宏定义返回最小值
#define min(a,b) ((a)<=(b)?(a):(b))

10.#include<>和#include""
①<>编译器从标准库的路径搜索
②""用户的工作路径搜索

11.全局变量与局部变量
①作用域：全局变量为程序块，局部变量为当前函数内
②生命周期：全局变量为整个函数，局部变量为当前函数
③存储方式：全局变量存储在全局数据区里面，局部变量存储在栈中
④使用方式：全局变量程序各个地方，局部变量函数内部

12.#define和#typedef
①#define是一个预处理指令，#typedef是一个关键字
②#define不会做正确性检查,直接替换，#typedef会做正确性检查
③#define没有作用域的限制，#typedef有作用域限制
④对指针操作不同

13.static的作用(定义一个静态变量或者静态函数)
①函数中静态变量只会构造一次
②静态函数或静态变量只能在当前文件中使用（作用域）
③在函数内部定义的静态变量不能被其他函数使用

14.内存泄漏
在程序运行的时候，动态分配的内存空间没有被回收或者正确释放，导致内存空间还占据系统资源

15.内存对齐
存储数据时将数据按一定规则放置在内存中的过程
以最大的变量所占内存来进行内存分配空间
typedef struct                  typedef struct
{                               {
    char a;  //1                    char a;   //1
    int b;   //4                    short b;  //2
    short c; //2                    double c; //8
}STU;                           }STU;
sizeof(STU) -> 12;              sizeof(STU) -> 16;

16.数组名和指针
①数组名是数组首元素的地址，可以看作一个常量指针，指向不能修改，内存访问四个字节
②使用指针访问数组的时候需要使用到解引用*，是间接访问
③sizeof计算的时候计算数组名计算的是整个数组的大小

17.指针常量和常量指针
①指针常量是指一个指针指向的地址是常量，无法修改指向的地址，但可以修改指向的数据
int A = 0, int B = 0;
int* const P = &A;
*P = 617    ;(√)
P = &B      ;(X)
②常量指针是指向常量的指针，无法修改指向的数据，但可以修改指向
const int* P;
*P = 617    ;(X)
P = &B      ;(√)

18.堆和栈的区别
①创建销毁方式
栈是系统自动分配，当函数执行完成，栈被自动销毁
堆是手动创建和释放和销毁，malloc和free
②空间大小
栈的空间小，堆的空间大
③访问速度
栈的访问速度比堆的访问速度快

19.malloc和new的区别
①malloc是C语言中的标准库函数，new是C++中的操作符
②malloc分配内存返回的是void*类型的指针，new分配内存返回的是对应对象类型的指针
③使用malloc分配内存时需要指定内存大小，使用new时不需要
④使用malloc分配内存时不会调用到构造函数，使用new时性需要调用到构造函数

20.struct和class在C++中的区别
①struct成员默认是共有的，class成员默认是私有的
②继承方面，struct共有继承，class私有继承
③使用场景，struct一般用于简单的数据结构，class用于封装和继承

21.C++中的类有几个访问权限
①共有的：成员声明为public时可以在类的外部进行访问
②私有的：成员声明为private时可以在类的内部进行访问
③受保护的: 成员声明为protected时可以在类的内部或者子类中进行访问
class fun
{
    public :
    int a;
    private :
    int b;
    fun(void)
    {
    }
}
































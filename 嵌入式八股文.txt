1.函数指针和指针函数
①指向函数的指针 int add(int A,int B){return A + B;}
int (*ptr)(int,int) = &add;
②返回值是指针的函数 int* add(void){}

2.指针的大小(与编译器大小有关)
32位4字节,64位8字节

3.sizeof 与 strlen
①sizeof是一个运算符,strlen是一个函数(string.h)
②sizeof计算所占内存大小,strlen计算字符串长度
 sizeof("\0")->2(\0\0)  strlen("\0")->0

4.数组指针与指针数组
①指向一个数组的指针,一个指针
int (*ptr) [10]
②一个数组,里面每个元素都是一个指针
int* ptr [10]

5.C语言的内存分配
①静态存储区分配:静态变量,全局变量
②栈上分配:函数中定义的局部变量
③堆上分配:malloc(C),new(C++)

6.结构体与联合体
①struct:不同成员放在不同的地址中,大小为每个成员的大小之和
typedef struct {int A,int B[5],int C} DATA;     20字节
②uinon:共享一块地址,共用体大小为成员中占内存最大的大小
union struct {int A,DATA B,int C} DATAS;        28字节

7.野指针
指向不可用内存的指针
①创建时未赋值
②指针被free和delete后未赋值为NULL
③指针越界

8.数组与链表
①数组地址空间连续,链表地址空间随机
②数组直接提供下标访问速度快
③链表增删改查速度快方便

9.宏定义返回最小值
#define min(a,b) ((a)<=(b)?(a):(b))

10.#include<>和#include""
①<>编译器从标准库的路径搜索
②""用户的工作路径搜索

11.全局变量与局部变量
①作用域:全局变量为程序块,局部变量为当前函数内
②生命周期:全局变量为整个函数,局部变量为当前函数
③存储方式:全局变量存储在全局数据区里面,局部变量存储在栈中
④使用方式:全局变量程序各个地方,局部变量函数内部

12.#define和#typedef
①#define是一个预处理指令,#typedef是一个关键字
②#define不会做正确性检查,直接替换,#typedef会做正确性检查
③#define没有作用域的限制,#typedef有作用域限制
④对指针操作不同

13.static的作用(定义一个静态变量或者静态函数)
①函数中静态变量只会构造一次
②静态函数或静态变量只能在当前文件中使用(作用域)
③在函数内部定义的静态变量不能被其他函数使用

14.内存泄漏
在程序运行的时候,动态分配的内存空间没有被回收或者正确释放,导致内存空间还占据系统资源

15.内存对齐
存储数据时将数据按一定规则放置在内存中的过程
以最大的变量所占内存来进行内存分配空间
typedef struct                  typedef struct
{                               {
    char a;  //1                    char a;   //1
    int b;   //4                    short b;  //2
    short c; //2                    double c; //8
}STU;                           }STU;
sizeof(STU) -> 12;              sizeof(STU) -> 16;

16.数组名和指针
①数组名是数组首元素的地址,可以看作一个常量指针,指向不能修改,内存访问四个字节
②使用指针访问数组的时候需要使用到解引用*,是间接访问
③sizeof计算的时候计算数组名计算的是整个数组的大小

17.指针常量和常量指针
①指针常量是指一个指针指向的地址是常量,无法修改指向的地址,但可以修改指向的数据
int A = 0, int B = 0;
int* const P = &A;
*P = 617    ;(√)
P = &B      ;(X)
②常量指针是指向常量的指针,无法修改指向的数据,但可以修改指向
const int* P;
*P = 617    ;(X)
P = &B      ;(√)

18.堆和栈的区别
①创建销毁方式
栈是系统自动分配,当函数执行完成,栈被自动销毁
堆是手动创建和释放和销毁,malloc和free
②空间大小
栈的空间小,堆的空间大
③访问速度
栈的访问速度比堆的访问速度快

19.malloc和new的区别
①malloc是C语言中的标准库函数,new是C++中的操作符
②malloc分配内存返回的是void*类型的指针,new分配内存返回的是对应对象类型的指针
③使用malloc分配内存时需要指定内存大小,使用new时不需要
④使用malloc分配内存时不会调用到构造函数,使用new时性需要调用到构造函数

20.struct和class在C++中的区别
①struct成员默认是共有的,class成员默认是私有的
②继承方面,struct共有继承,class私有继承
③使用场景,struct一般用于简单的数据结构,class用于封装和继承

21.C++中的类有几个访问权限
①共有的:成员声明为public时可以在类的外部进行访问
②私有的:成员声明为private时可以在类的内部进行访问
③受保护的: 成员声明为protected时可以在类的内部或者子类中进行访问
class fun
{
    public :
    int a;
    private :
    int b;
    fun(void)
    {
    }
}

22.内联函数
①特殊的函数声明方式,函数前面加上inline关键字,指示编译器在调用时将其展开而不是调用
②减小函数调用的开销,提高执行的效率
③允许编译器进行优化

23.strcpy
char* mystrcpy(char* dest,char* src)
{
    char* temp = dest;
    while((*dest++ = *src++));
    return temp;
}

24.程序分为几个段
①代码段:存储程序的可执行指令,一般只读,防止状态被修改
②数据段(data):存储已经初始化的全局变量和静态变量
③BSS段:存储没有初始化的全局变量和静态变量
④堆:malloc free
⑤栈:局部变量,系统释放

25.队列和栈的区别
①访问方式:队列先进先出,栈先进后出
②队列在队尾进行操作,在队首进行删除,栈在栈顶进行操作
③应用场景:
栈:函数调用,表达式求值
队列:任务调度,广度优先搜索

26.一个.C文件怎么变成可执行文件
①预处理:将头文件和定义进行展开,生成没有注释的源代码(.i)
②编译:将预处理得到的源代码变成汇编代码(.s)
③汇编:将汇编码转变成机械码生成对应的目标文件(.o)
④链接:将全部的.o文件链接成可执行程序

27.SPI和IIC寻址区别
①SPI:MOSI,MISO,SCLK,CS(片选引脚选择对应设备)
②IIC:SCLK,SDA(通过从机地址寻找对应设备)

28.交叉编译
在一个平台上编译出另一个平台的可执行程序
Ubuntu -> 交叉工具编译链 -> 可执行程序

29.UART,IIC,SPI区别
①通信方式
UART异步通信,IIC,SPI同步通信
②通信线路
 UART : TX   RX
 IIC  : SDA  SCL
 SPI  : MOSI MISO SCLK CS
③通信设备
 UART : 一对一通信
 IIC  : 多主机多从机
 SPI  : 一主多从
④传输速率
 UART : 波特率115200
 IIC  : 标准模式100kpbs 快速模式 400kpbs 高速模式 3.4Mbps
 SPI  : 
⑤工作模式
 UART : 全双工/半双工
 IIC  : 半双工
 SPI  : 全双工

30.TCP和UDP区别
①可靠性     : TCP三次握手进行可靠的传输,UDP无连接提供不可靠的数据通信
②通信方式   : TCP面向连接的通信方式,UDP不需要进行连接
③通信速率   : UDP > TCP
④应用场景   : TCP邮件,文件 UDP视频流,游戏,直播

31.进程和线程的区别
①定义
进程是资源分配的基本单位,线程是执行单元,是CPU调度和执行的基本单位 进程>线程
②资源占有
每个进程有独立的地址空间,线程共享进程的地址空间
③容错性
一个进程出现问题不会影响到其他的进程执行,线程出现问题可能会进程错误从而影响别的线程
④调度和切换
进程通过调度器进行调度切换,独立单位,需要恢复上下文比较多,消耗资源大
线程消耗资源小

32.进程间通信
①管道 ②命名管道 ③共享内存(mmap) ④信号量 ⑤消息队列 ⑥套接字(socket) ⑦信号
其中管道,共享内存(在内核空间创建的共享内存),信号量,消息队列,套接字需要借助内核空间

33.DMA
无需CPU参与,让外设和系统内存之间进行双向的数据传递

34.进程的状态
①创建状态:调用fork进入创建状态
②就绪状态:准备未运行
③运行状态:
④阻塞状态:等待信号量,互斥量等事件
⑤终止状态:进程结束

35.各种进程
①僵尸进程:使用fork创建子进程后,子进程退出,父进程没有调用wait或者waitpid函数获取子进程状态
         子进程信息还保存在系统中,子进程则为僵尸进程
②孤儿进程:父进程异常结束,子进程变成孤儿进程,会被init号进程收养
③守护进程:父进程创建子进程后故意把父进程结束

36.freeRTOS调度算法
①抢占式调度:高优先级任务可以打断低优先级任务
②时间片轮转:相同优先级的任务具有相同大小的时间片
③协作式调度:使用vtaskdelay释放CPU让其他任务运行,信号量,互斥量等实现

37.RTOS中任务同步的方式
①队列     :还可以进行数据的传递
②信号量   :在freeRTOS中分为二进制信号量实现共享资源的访问,计数型信号量实现生产者消费者模型
③互斥量   :共享资源的访问
④事件组   :等待多个任务的通知
⑤任务通知  :轻量级的任务同步方式,依据TCB控制块进行任务通知,不需要创建就可以实现,用于一对一通信

38.RTOS中时间片的大小
croutine.h -> configTick_RATE_HZ

36.freeRTOS中任务的状态
①就绪态
②运行态
③阻塞态:等待信号量或互锁量
④挂起态:vTaskSuspend函数





















